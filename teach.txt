# 前言
Suatin编程语言项目——一款简单的直译型解释器By Demllie
2020,3,19 今天刚刚完成了for循环，现在while,do-until,for三种循环和if-elif-else分支都实现了
Suatin这个项目我打算做到function就结束的，毕竟没有学习编译原理，没有使用递归下降，
做起来很辛苦，有些部分我想如果懂了编译原理的知识应该会处理得更好，更简易些，所以，我实际上
是在为自己的无知付出代价2333

2020,3,19 增加了一个简陋的调试机制，可以逐步找出suatin程序解释期出现的bug的位置

2020,3,26 完善了循环的功能，可以使用break;和continue;了

2020,3,28 精简的变量的内存结构！将单个分号不算做语句，提供了运行速度！现在
一万个数的空循环大概1秒多，一百万个数的空循环90多秒！优化后的一百万个数的空循环1秒内！






# 内容
source是Suatin项目源码
suatin.exe是编译好的解释器（因为之前经常有人编译我的代码出错，但是我自己却不出错，只怪IDE太强大了）
main.suatin的Suatin语言的源文件
teach.txt是Suatin语言教程





# 数据类型
nil 				因为语言是动态类型的，所以不用定义，直接写上去的除关键字和TRUE,FALSE,NIL三个预定义变量外的其他变量
				都会创建一个默认nil类型的新变量
				注：nil类型的数据不能进行计算，必须先初始化，比如sum=0;

number				目前语言中没有实现int，只有number，双浮点数

bool				判断语句和逻辑运算语句会返回布尔
				单个布尔变量的初始化: flag = TRUE;

string				字符串的数据就是双引号内的，当一个单元表达式（没有判断运算符>,<,>=,<=,==,~=，逻辑运算符and,not,or）
				的第一个数据是字符串或者字符串类型的变量时，这个单元表达式会变成字符串拼接，即这个单元表达式中只能
				有字符串、字符串类型的变量、加号（这时的加号表示字符串的拼接）




# Run-Time Type Identification
Suatin解释器的原理是对每条语句构造一颗语法树，把每条语句的Parser类实例都放入一个容器中，另外又构造一颗语义树，解释时解释语义树，当解释
到某个单条语句时，会发射信号给解释语句的槽函数，然后由槽函数解释对应的语句，并且还由全局变量得到这个返回结果真假的信息！

Suatin解释器中，解释接口不止有一个，而是有三个，解释时到底该调用哪个，需要在解释前判断。在解释语法树前，先遍历，让几乎每个节点
得到其解释时该调用的孩子的解释接口类型！
（解释接口不止有一个这是个败笔，因为共用体的使用总是出错！所以底层用结构体替代了共用体，也挺浪费资源的！）






# 五则计算模式
+，-，*，、，^ 			是Suatin中的五种基本运算

1 + (2-3)*3/3^2^(1+2);		五种之间的混合计算也实现了




# 字符串拼接模式
"1"+"2";			介绍string类型时讲过了!字符串拼接模式下，单元表达式不能有括号，括号除了分支、循环的后面有之外，就只能
				存在于五则计算模式下的单元表达式中





# 判断语句
>,<,>=,<=,~=,==			是Suatin中的6种判断运算符，前四个左右只能是返回number类型，后两个左右可以返回数字、字符串、布尔类型的变量

1 > 3 + 2*(4+0);		单元判断语句只能有一个判断符

TRUE ~= 1;			Suatin语言中，除了未初始化的变量nil类型为FLASE外，还有FALSE变量为FALSE，其他的数字、字符串，无论
				是0还是""都是TRUE的！！！




# 逻辑语句
not 1 and sum==2 or 3;		not,and,or是Suatin中的逻辑运算符，一个语句中最多只能有一个not，必须放在语句开头
				and优先级大于or，所以会先解释and，后解释or，那么，这个式子中，先返回 1 and sum==2的结果给or
				然后返回or的结果给not,最后返回not的结果就是语句的返回结果了
				显然无论是判断语句，还是逻辑语句，都只能返回布尔类型的数据

1 and 2>3 and 4<5+1 or "";	逻辑语句等级高于判断语句，判断语句等级高于单元表达式。单元表达式是判断语句的单元，
				也是逻辑语句的单元。判断语句是逻辑语句的单元




# 赋值语句
a = b = c = 1;			语句的赋值，不管变量之前是什么类型，不管是否有这个变量，赋值后变量有了，类型也是=最后的表达式返回的数据的类型




# 分支语句
sum=0;				if-elif-else的结构
if(sum==0)
	sum=1;
elif(sum==1)
	sum=2;
elif(sum==2)
	sum=3;
	if(sum==3)
		sum=4;
	end
else 
	sum=5;
end






# 循环语句
i=0;				while结构，满足i<10的条件就进入循环
while(i<10)
	i=i+1;
end




i=0;				do-until结构，满足i==10条件就退出循环
do
	i=i+1;
until(i==10)	





sum=0;				for结构，和C一样
for(i=0;i<10;i=i+1)
	sum=sum+1;
end




# 调试机制
assert;				这条语句会停止程序的解释，停止后，输入exit就会使解释器直接退出
				输入其他的则会继续向下执行


# 注释
//				只有单行注释，多行注释识别不了。。。